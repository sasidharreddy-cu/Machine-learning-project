# -*- coding: utf-8 -*-
"""SVM_and_Random_Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oQbUFDcgcL8g8TCpIOBuVKU1ozN2rBjp
"""

import pandas as pd
import numpy as np

df = pd.read_csv("/content/stock_market_data.csv")
df

df['Profit_Label'] = pd.cut(df['PercentageChange'],
                             bins=[-float('inf'), -5, 0, 5, float('inf')],
                             labels=['High Loss', 'Low Loss', 'Low Profit', 'High Profit'],
                             right=False)

df = df.drop(['Date', 'Ticker'], axis=1).reset_index(drop=True)

df.to_csv("stock_market_data_SVM.csv", index=False)

df

from sklearn.model_selection import train_test_split

X = df[['Open', 'High', 'Low', 'Close','Volume', 'PercentageChange']]
y = df['Profit_Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print("Train shape:", X_train.shape)
print("Test shape:", X_test.shape)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print("Scaled Train shape:", X_train_scaled.shape)
print("Scaled Test shape:", X_test_scaled.shape)

import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.svm import SVC

def plot_decision_boundary(X, y, model, ax, title):
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X)

    h = .02
    x_min, x_max = X_pca[:, 0].min() - 1, X_pca[:, 0].max() + 1
    y_min, y_max = X_pca[:, 1].min() - 1, X_pca[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

    Z = model.predict(pca.inverse_transform(np.c_[xx.ravel(), yy.ravel()]))

    Z_numeric = pd.factorize(Z)[0].reshape(xx.shape)

    ax.contourf(xx, yy, Z_numeric, alpha=0.75)

    y_numeric = pd.factorize(y)[0]
    scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], c=y_numeric, edgecolors='k', s=30)

    ax.set_title(title)
    ax.set_xlabel("Feature 1")
    ax.set_ylabel("Feature 2")

    return scatter

model = SVC(kernel='linear', C=1, random_state=42)
model.fit(X_train_scaled, y_train)

fig, ax = plt.subplots()
scatter = plot_decision_boundary(X_train_scaled, y_train, model, ax, "Decision Boundary")
plt.show()

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

print("\nTraining Data (features):")
print(pd.DataFrame(X_train).head())
print("\nTesting Data (features):")
print(pd.DataFrame(X_test).head())

print("\nTraining Labels (target):")
print(pd.Series(y_train).head())
print("\nTesting Labels (target):")
print(pd.Series(y_test).head())

kernels = ['linear', 'poly', 'rbf']
C_values = [0.1, 1, 10]

results = {}

for kernel in kernels:
    fig, axes = plt.subplots(1, len(C_values), figsize=(15, 5), sharey=True)
    fig.suptitle(f"Kernel: {kernel}", fontsize=16)

    for ax_num, C in enumerate(C_values):
        model = SVC(kernel=kernel, C=C, degree=3, coef0=1, random_state=42)
        model.fit(X_train_scaled, y_train)
        y_pred = model.predict(X_test_scaled)

        acc = accuracy_score(y_test, y_pred)
        cm = confusion_matrix(y_test, y_pred)

        results[(kernel, C)] = {'accuracy': acc, 'confusion_matrix': cm}

        sns.heatmap(cm, annot=True, fmt='d', ax=axes[ax_num])
        axes[ax_num].set_title(f"C: {C} - Acc: {acc:.2f}")
        axes[ax_num].set_xlabel("Predicted")
        if ax_num == 0:
            axes[ax_num].set_ylabel("Actual")

        if kernel == 'linear' and X_train_scaled.shape[1] == 2:
            plot_decision_boundary(X_train_scaled, y_train, model, axes[ax_num], f"{kernel} C={C} Boundary")

    plt.tight_layout()
    plt.show()
    print(f"Accuracy Results for Kernel: {kernel}")
    for C in C_values:
        print(f"C: {C} - Accuracy: {results[(kernel, C)]['accuracy']:.4f}")
    print("\n")

print("Classification Report:")
print(classification_report(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train_scaled, y_train)

y_pred_train = rf_classifier.predict(X_train_scaled)
y_pred_test = rf_classifier.predict(X_test_scaled)

print("\nRandom Forest: Training Data (features):")
print(pd.DataFrame(X_train).head())
print("\nRandom Forest: Testing Data (features):")
print(pd.DataFrame(X_test).head())
print("\nRandom Forest: Training Labels (target):")
print(pd.Series(y_train).head())
print("\nRandom Forest: Testing Labels (target):")
print(pd.Series(y_test).head())

accuracy = accuracy_score(y_test, y_pred_test)

cm_test = confusion_matrix(y_test, y_pred_test)
plt.figure(figsize=(8, 6))
sns.heatmap(cm_test, annot=True, fmt="d", cmap="Blues",
            xticklabels=['High Loss', 'Low Loss', 'Low Profit', 'High Profit'],
            yticklabels=['High Loss', 'Low Loss', 'Low Profit', 'High Profit'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

print(f"Accuracy: {accuracy:.4f}")
print("Classification Report\n", classification_report(y_test, y_pred_test))